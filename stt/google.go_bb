package stt

import (
	"bytes"
	"context"
	"encoding/binary"
	"fmt"
	"plugin"
	"time"

	speech "cloud.google.com/go/speech/apiv1"
	"github.com/webitel/storage/app"
	speechpb "google.golang.org/genproto/googleapis/cloud/speech/v1"
)

func Get() app.Transcoding {
	plug, err := plugin.Open("/home/igor/work/storage/transcoding/audio.so")
	if err != nil {
		panic(err.Error())
	}

	sumText, err := plug.Lookup("Transcoding")
	if err != nil {
		panic(err.Error())
	}

	p, ok := sumText.(app.Transcoding)
	if !ok {
		panic("no OK")
	}
	p.Decode("/home/igor/Documents/call_center-linux_amd64/1.mp3.wav")

	return p
}

func init() {
	return

	ctx := context.Background()

	client, err := speech.NewClient(ctx)
	if err != nil {
		panic(err.Error())
	}

	b := Get()

	defer b.Close()

	buf := new(bytes.Buffer)
	binary.Write(buf, binary.LittleEndian, b.Channels()[0])

	r, _ := client.StreamingRecognize(ctx)
	err = r.Send(&speechpb.StreamingRecognizeRequest{
		StreamingRequest: &speechpb.StreamingRecognizeRequest_StreamingConfig{
			StreamingConfig: &speechpb.StreamingRecognitionConfig{
				Config: &speechpb.RecognitionConfig{
					Encoding:                            speechpb.RecognitionConfig_LINEAR16,
					SampleRateHertz:                     16000,
					AudioChannelCount:                   1,
					EnableSeparateRecognitionPerChannel: false,
					LanguageCode:                        "ru-RU",
					AlternativeLanguageCodes:            nil,
					MaxAlternatives:                     0,
					ProfanityFilter:                     false,
					Adaptation:                          nil,
					SpeechContexts:                      nil,
					EnableWordTimeOffsets:               true,
					EnableWordConfidence:                true,
					EnableAutomaticPunctuation:          false,
					EnableSpokenPunctuation:             nil,
					EnableSpokenEmojis:                  nil,
					DiarizationConfig:                   nil,
					Metadata:                            nil,
					Model:                               "",
					UseEnhanced:                         false,
				},
			},
		},
	})

	go func() {
		for rcv, e := r.Recv(); ; {
			if rcv != nil {
				fmt.Println(rcv.String())
			}
			if e != nil && e.Error() != "EOF" {
				panic(e.Error())
			}
		}
	}()

	if err != nil {
		panic(err.Error())
	}

	err = r.Send(&speechpb.StreamingRecognizeRequest{
		StreamingRequest: &speechpb.StreamingRecognizeRequest_AudioContent{
			AudioContent: buf.Bytes(),
		},
	})

	if err != nil {
		panic(err.Error())
	}

	err = r.CloseSend()

	if err != nil {
		panic(err.Error())
	}

	time.Sleep(time.Minute)

	// Send the contents of the audio file with the encoding and
	// and sample rate information to be transcripted.
	//req := &speechpb.LongRunningRecognizeRequest{
	//	Config: &speechpb.RecognitionConfig{
	//		Encoding:        speechpb.RecognitionConfig_LINEAR16,
	//		SampleRateHertz: 16000,
	//		LanguageCode:    "uk-UA",
	//	},
	//	Audio: &speechpb.RecognitionAudio{
	//		AudioSource: &speechpb.RecognitionAudio_Content{
	//			Content: buf.Bytes(),
	//		},
	//	},
	//}
	//
	//op, err := client.LongRunningRecognize(ctx, req)
	//if err != nil {
	//	panic(err.Error())
	//}
	//
	//resp, err := op.Wait(ctx)
	//if err != nil {
	//	panic(err.Error())
	//}
	//
	//// print result
	//fmt.Printf("Result: %v\n", resp.String())
	//
	//// Print the results.
	//for _, result := range resp.Results {
	//	for _, alt := range result.Alternatives {
	//		fmt.Printf("\"%v\" (confidence=%3f)\n", alt.Transcript, alt.Confidence)
	//	}
	//}
}
